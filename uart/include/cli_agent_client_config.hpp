//! @file
//! @author cli2cpp.py - CLI library 2.9 (Alexis Royer, http://alexis.royer.free.fr/CLI/)
//! @date 2023-04-05T16:20:39.141599
//! @warning File auto-generated by 'cli2cpp.py' - Do not edit!

// ----- Pre-compiled headers -----
#include "cli/pch.h"

// ----- Extra cpp (option='head') -----

// ----- Includes -----
#include "cli/common.h"

// ----- Extra cpp (option='include') -----
#include "cli/ui_password.h"
#include "iostream"
#include "cli_agent_api.hpp"
#include "cli_agent_common.hpp"

// ----- Extra cpp (option='types') -----

// ----- Extra cpp (option='vars') -----

// ----- Cli class definition -----
class cli_agent_client : public cli::Cli {
    // ----- Sub-menus -----

    // ----- Owner CLI -----
    private: cli_agent_client* m_pcliOwnerCli;
    // ----- Menus -----
    private: cli_agent_client* m_pcli_cli_a;
    // ----- Node members -----
    private: cli::Keyword* m_pcli_keyword_enter_sleep_e;
        private: cli::Endl* m_pcli_endl_eb;
    private: cli::Keyword* m_pcli_keyword_wifi_cmd_f;
        private: cli::ParamString* m_pcli_param_AT_fb;
            private: cli::Endl* m_pcli_endl_fba;
    private: cli::Keyword* m_pcli_keyword_set_sn_g;
        private: cli::ParamString* m_pcli_param_sn_gb;
            private: cli::Endl* m_pcli_endl_gba;
    private: cli::Keyword* m_pcli_keyword_get_sn_h;
        private: cli::Endl* m_pcli_endl_hb;
    private: cli::Keyword* m_pcli_keyword_get_mac_i;
        private: cli::Endl* m_pcli_endl_ib;
    private: cli::Keyword* m_pcli_keyword_set_mac_j;
        private: cli::ParamString* m_pcli_param_mac_jb;
            private: cli::Endl* m_pcli_endl_jba;
    private: cli::Keyword* m_pcli_keyword_get_version_k;
        private: cli::Endl* m_pcli_endl_kb;
    private: cli::Keyword* m_pcli_keyword_gen_oob_l;
        private: cli::Endl* m_pcli_endl_lb;
    private: cli::Keyword* m_pcli_keyword_set_did_m;
        private: cli::ParamString* m_pcli_param_did_mb;
            private: cli::Endl* m_pcli_endl_mba;
    private: cli::Keyword* m_pcli_keyword_get_did_n;
        private: cli::Endl* m_pcli_endl_nb;
    private: cli::Keyword* m_pcli_keyword_fac_reset_o;
        private: cli::Endl* m_pcli_endl_ob;
    private: cli::Keyword* m_pcli_keyword_get_qr_code_p;
        private: cli::Endl* m_pcli_endl_pb;
    private: cli::Keyword* m_pcli_keyword_set_key_q;
        private: cli::ParamString* m_pcli_param_key_qb;
            private: cli::Endl* m_pcli_endl_qba;
    private: cli::Keyword* m_pcli_keyword_get_key_r;
        private: cli::Endl* m_pcli_endl_rb;
    private: cli::Keyword* m_pcli_keyword_cam_start_s;
        private: cli::Endl* m_pcli_endl_sb;
    private: cli::Keyword* m_pcli_keyword_cam_stop_t;
        private: cli::Endl* m_pcli_endl_tb;
    private: cli::Keyword* m_pcli_keyword_mic_start_u;
        private: cli::Endl* m_pcli_endl_ub;
    private: cli::Keyword* m_pcli_keyword_mic_spk_test_v;
        private: cli::Endl* m_pcli_endl_vb;
    private: cli::Keyword* m_pcli_keyword_mic_spk_aec_w;
        private: cli::Endl* m_pcli_endl_wb;
    private: cli::Keyword* m_pcli_keyword_get_mic_file_x;
        private: cli::Endl* m_pcli_endl_xb;
    private: cli::Keyword* m_pcli_keyword_mic_stop_y;
        private: cli::Endl* m_pcli_endl_yb;
    private: cli::Keyword* m_pcli_keyword_spk_start_z;
        private: cli::Endl* m_pcli_endl_zb;
    private: cli::Keyword* m_pcli_keyword_speak_stop_A;
        private: cli::Endl* m_pcli_endl_Ab;
    private: cli::Keyword* m_pcli_keyword_light_sensor_start_B;
        private: cli::Endl* m_pcli_endl_Bb;
    private: cli::Keyword* m_pcli_keyword_g_sensor_start_C;
        private: cli::Endl* m_pcli_endl_Cb;
    private: cli::Keyword* m_pcli_keyword_wled_start_D;
        private: cli::Endl* m_pcli_endl_Db;
    private: cli::Keyword* m_pcli_keyword_wled_stop_E;
        private: cli::Endl* m_pcli_endl_Eb;
    private: cli::Keyword* m_pcli_keyword_irled_start_F;
        private: cli::Endl* m_pcli_endl_Fb;
    private: cli::Keyword* m_pcli_keyword_irled_stop_G;
        private: cli::Endl* m_pcli_endl_Gb;
    private: cli::Keyword* m_pcli_keyword_rgb_led_set_H;
        private: cli::ParamString* m_pcli_param_colour_Hb;
            private: cli::Endl* m_pcli_endl_Hba;
    private: cli::Keyword* m_pcli_keyword_obj_pir_start_I;
        private: cli::Endl* m_pcli_endl_Ic;
    private: cli::Keyword* m_pcli_keyword_obj_pir_stop_J;
        private: cli::Endl* m_pcli_endl_Jb;
    private: cli::Keyword* m_pcli_keyword_get_battery_K;
        private: cli::Endl* m_pcli_endl_Kb;
    private: cli::Keyword* m_pcli_keyword_start_button_test_L;
        private: cli::Endl* m_pcli_endl_Lb;
    private: cli::Keyword* m_pcli_keyword_save_info_M;
        private: cli::ParamString* m_pcli_param_mkey_Mb;
            private: cli::ParamString* m_pcli_param_mvalue_Mba;
                private: cli::Endl* m_pcli_endl_Mbaa;
    private: cli::Keyword* m_pcli_keyword_get_info_N;
        private: cli::ParamString* m_pcli_param_mkey_Nb;
            private: cli::Endl* m_pcli_endl_Nba;
    private: cli::Keyword* m_pcli_keyword_led_0x04__O;
        private: cli::ParamInt* m_pcli_param_iCmdCode_Ob;
            private: cli::ParamInt* m_pcli_param_iBright_Obb;
                private: cli::ParamInt* m_pcli_param_iRGB_Obbb;
                    private: cli::Endl* m_pcli_endl_Obbbb;
    private: cli::Keyword* m_pcli_keyword_upgrade_P;
        private: cli::Endl* m_pcli_endl_Pb;
    private: cli::Keyword* m_pcli_keyword_mcutest_Q;
        private: cli::ParamInt* m_pcli_param_iCmdCode_Qb;
            private: cli::Endl* m_pcli_endl_Qbb;
    // ----- Extra cpp (option='members') -----

    // ----- Constructor -----
    public: explicit cli_agent_client(void) :
        cli::Cli("", cli::Help())
    {
        Populate();
        // ----- Extra cpp (option='constructor') -----
    }

    // ----- Destructor -----
    public: virtual ~cli_agent_client(void) {
    }

    // ----- Populate -----
    public: void Populate(void) {
        // CLI reference
        m_pcliOwnerCli = dynamic_cast<cli_agent_client*>(const_cast<cli::Cli*>(& GetCli()));
        // Comment line patterns
        // Create menus and populate
        m_pcliOwnerCli->m_pcli_cli_a = this;
        // Local nodes
        m_pcli_keyword_enter_sleep_e = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("enter_sleep", cli::Help().AddHelp(cli::Help::LANG_EN, "Enter sleep status"))));
            m_pcli_endl_eb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_enter_sleep_e->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_wifi_cmd_f = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("wifi_cmd", cli::Help().AddHelp(cli::Help::LANG_EN, "wifi_cmd"))));
            m_pcli_param_AT_fb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_wifi_cmd_f->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_endl_fba = dynamic_cast<cli::Endl*>(& m_pcli_param_AT_fb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_set_sn_g = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("set_sn", cli::Help().AddHelp(cli::Help::LANG_EN, "set PCB SN"))));
            m_pcli_param_sn_gb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_set_sn_g->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_endl_gba = dynamic_cast<cli::Endl*>(& m_pcli_param_sn_gb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_sn_h = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_sn", cli::Help().AddHelp(cli::Help::LANG_EN, "get PCB SN"))));
            m_pcli_endl_hb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_sn_h->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_mac_i = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_mac", cli::Help().AddHelp(cli::Help::LANG_EN, "get MAC"))));
            m_pcli_endl_ib = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_mac_i->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_set_mac_j = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("set_mac", cli::Help().AddHelp(cli::Help::LANG_EN, "set DID"))));
            m_pcli_param_mac_jb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_set_mac_j->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_endl_jba = dynamic_cast<cli::Endl*>(& m_pcli_param_mac_jb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_version_k = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_version", cli::Help().AddHelp(cli::Help::LANG_EN, "get system version"))));
            m_pcli_endl_kb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_version_k->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_gen_oob_l = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("gen_oob", cli::Help().AddHelp(cli::Help::LANG_EN, "get did"))));
            m_pcli_endl_lb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_gen_oob_l->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_set_did_m = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("set_did", cli::Help().AddHelp(cli::Help::LANG_EN, "set DID"))));
            m_pcli_param_did_mb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_set_did_m->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_endl_mba = dynamic_cast<cli::Endl*>(& m_pcli_param_did_mb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_did_n = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_did", cli::Help().AddHelp(cli::Help::LANG_EN, "get did"))));
            m_pcli_endl_nb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_did_n->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_fac_reset_o = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("fac_reset", cli::Help().AddHelp(cli::Help::LANG_EN, "factory reset , not support now"))));
            m_pcli_endl_ob = dynamic_cast<cli::Endl*>(& m_pcli_keyword_fac_reset_o->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_qr_code_p = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_qr_code", cli::Help().AddHelp(cli::Help::LANG_EN, "get QR code"))));
            m_pcli_endl_pb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_qr_code_p->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_set_key_q = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("set_key", cli::Help().AddHelp(cli::Help::LANG_EN, "set key"))));
            m_pcli_param_key_qb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_set_key_q->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_endl_qba = dynamic_cast<cli::Endl*>(& m_pcli_param_key_qb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_key_r = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_key", cli::Help().AddHelp(cli::Help::LANG_EN, "get key"))));
            m_pcli_endl_rb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_key_r->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_cam_start_s = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("cam_start", cli::Help().AddHelp(cli::Help::LANG_EN, "start camer test, save file to sdcard"))));
            m_pcli_endl_sb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_cam_start_s->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_cam_stop_t = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("cam_stop", cli::Help().AddHelp(cli::Help::LANG_EN, "stop camer test"))));
            m_pcli_endl_tb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_cam_stop_t->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_mic_start_u = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("mic_start", cli::Help().AddHelp(cli::Help::LANG_EN, "start microphone test"))));
            m_pcli_endl_ub = dynamic_cast<cli::Endl*>(& m_pcli_keyword_mic_start_u->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_mic_spk_test_v = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("mic_spk_test", cli::Help().AddHelp(cli::Help::LANG_EN, "mic_spk_test"))));
            m_pcli_endl_vb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_mic_spk_test_v->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_mic_spk_aec_w = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("mic_spk_aec", cli::Help().AddHelp(cli::Help::LANG_EN, "mic_spk_aec"))));
            m_pcli_endl_wb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_mic_spk_aec_w->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_mic_file_x = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_mic_file", cli::Help().AddHelp(cli::Help::LANG_EN, "upload mic file"))));
            m_pcli_endl_xb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_mic_file_x->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_mic_stop_y = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("mic_stop", cli::Help().AddHelp(cli::Help::LANG_EN, "stop microphone test"))));
            m_pcli_endl_yb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_mic_stop_y->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_spk_start_z = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("spk_start", cli::Help().AddHelp(cli::Help::LANG_EN, "start speak test"))));
            m_pcli_endl_zb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_spk_start_z->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_speak_stop_A = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("speak_stop", cli::Help().AddHelp(cli::Help::LANG_EN, "stop speak test"))));
            m_pcli_endl_Ab = dynamic_cast<cli::Endl*>(& m_pcli_keyword_speak_stop_A->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_light_sensor_start_B = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("light_sensor_start", cli::Help().AddHelp(cli::Help::LANG_EN, "start light sensor test"))));
            m_pcli_endl_Bb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_light_sensor_start_B->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_g_sensor_start_C = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("g_sensor_start", cli::Help().AddHelp(cli::Help::LANG_EN, "start Gravity acceleration sensor"))));
            m_pcli_endl_Cb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_g_sensor_start_C->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_wled_start_D = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("wled_start", cli::Help().AddHelp(cli::Help::LANG_EN, "open white LED"))));
            m_pcli_endl_Db = dynamic_cast<cli::Endl*>(& m_pcli_keyword_wled_start_D->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_wled_stop_E = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("wled_stop", cli::Help().AddHelp(cli::Help::LANG_EN, "close white LED"))));
            m_pcli_endl_Eb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_wled_stop_E->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_irled_start_F = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("irled_start", cli::Help().AddHelp(cli::Help::LANG_EN, "open infrared LED"))));
            m_pcli_endl_Fb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_irled_start_F->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_irled_stop_G = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("irled_stop", cli::Help().AddHelp(cli::Help::LANG_EN, "close infrared LED"))));
            m_pcli_endl_Gb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_irled_stop_G->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_rgb_led_set_H = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("rgb_led_set", cli::Help().AddHelp(cli::Help::LANG_EN, "set 616 rgb led with(r y b o, red yellow blue off)"))));
            m_pcli_param_colour_Hb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_rgb_led_set_H->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_endl_Hba = dynamic_cast<cli::Endl*>(& m_pcli_param_colour_Hb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_obj_pir_start_I = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("obj_pir_start", cli::Help().AddHelp(cli::Help::LANG_EN, "to receive obj recognise").AddHelp(cli::Help::LANG_EN, "max wait time"))));
            m_pcli_endl_Ic = dynamic_cast<cli::Endl*>(& m_pcli_keyword_obj_pir_start_I->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_obj_pir_stop_J = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("obj_pir_stop", cli::Help().AddHelp(cli::Help::LANG_EN, "stop receive"))));
            m_pcli_endl_Jb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_obj_pir_stop_J->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_battery_K = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_battery", cli::Help().AddHelp(cli::Help::LANG_EN, "get battery info"))));
            m_pcli_endl_Kb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_get_battery_K->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_start_button_test_L = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("start_button_test", cli::Help().AddHelp(cli::Help::LANG_EN, "press any button"))));
            m_pcli_endl_Lb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_start_button_test_L->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_save_info_M = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("save_info", cli::Help().AddHelp(cli::Help::LANG_EN, "demo(save_info key value)"))));
            m_pcli_param_mkey_Mb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_save_info_M->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_param_mvalue_Mba = dynamic_cast<cli::ParamString*>(& m_pcli_param_mkey_Mb->AddElement(new cli::ParamString(cli::Help())));
                    m_pcli_endl_Mbaa = dynamic_cast<cli::Endl*>(& m_pcli_param_mvalue_Mba->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_get_info_N = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("get_info", cli::Help().AddHelp(cli::Help::LANG_EN, "demo(get_info key)"))));
            m_pcli_param_mkey_Nb = dynamic_cast<cli::ParamString*>(& m_pcli_keyword_get_info_N->AddElement(new cli::ParamString(cli::Help())));
                m_pcli_endl_Nba = dynamic_cast<cli::Endl*>(& m_pcli_param_mkey_Nb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_led_0x04__O = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("led(0x04)", cli::Help().AddHelp(cli::Help::LANG_EN, "led config"))));
            m_pcli_param_iCmdCode_Ob = dynamic_cast<cli::ParamInt*>(& m_pcli_keyword_led_0x04__O->AddElement(new cli::ParamInt(cli::Help().AddHelp(cli::Help::LANG_EN, "0: off 1: on 2: breathing 3:waterfall"))));
                m_pcli_param_iBright_Obb = dynamic_cast<cli::ParamInt*>(& m_pcli_param_iCmdCode_Ob->AddElement(new cli::ParamInt(cli::Help().AddHelp(cli::Help::LANG_EN, "0~255"))));
                    m_pcli_param_iRGB_Obbb = dynamic_cast<cli::ParamInt*>(& m_pcli_param_iBright_Obb->AddElement(new cli::ParamInt(cli::Help().AddHelp(cli::Help::LANG_EN, "0 : all 1: Red 2:Green 4: blue"))));
                        m_pcli_endl_Obbbb = dynamic_cast<cli::Endl*>(& m_pcli_param_iRGB_Obbb->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_upgrade_P = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("upgrade", cli::Help().AddHelp(cli::Help::LANG_EN, "MCUUPGRADE"))));
            m_pcli_endl_Pb = dynamic_cast<cli::Endl*>(& m_pcli_keyword_upgrade_P->AddElement(new cli::Endl(cli::Help())));
        m_pcli_keyword_mcutest_Q = dynamic_cast<cli::Keyword*>(& m_pcliOwnerCli->m_pcli_cli_a->AddElement(new cli::Keyword("mcutest", cli::Help().AddHelp(cli::Help::LANG_EN, "MCUTest"))));
            m_pcli_param_iCmdCode_Qb = dynamic_cast<cli::ParamInt*>(& m_pcli_keyword_mcutest_Q->AddElement(new cli::ParamInt(cli::Help().AddHelp(cli::Help::LANG_EN, "iCmdCode"))));
                m_pcli_endl_Qbb = dynamic_cast<cli::Endl*>(& m_pcli_param_iCmdCode_Qb->AddElement(new cli::Endl(cli::Help())));
        // tag[@ref] -> tag[@id] connections
    }

    // ----- Menu execution -----
    public: virtual const bool Execute(const cli::CommandLine& CLI_CmdLine) const {
        {
            static const cli::TraceClass CLI_EXECUTION("CLI_EXECUTION", cli::Help().AddHelp(cli::Help::LANG_EN, "CLI Execution traces").AddHelp(cli::Help::LANG_FR, "Traces d'exécution du CLI"));
            cli::CommandLineIterator cli_Elements(CLI_CmdLine);
            // >
            m_pcli_cli_a_top_lbl: ;
            {
                if (! cli_Elements.StepIt()) return false;
                cli::GetTraces().Trace(CLI_EXECUTION) << "context = \">\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                // > enter_sleep
                m_pcli_keyword_enter_sleep_e_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_enter_sleep_e) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> enter_sleep\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > enter_sleep <CR>
                    m_pcli_endl_eb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_eb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> enter_sleep <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 EnterSleepState(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_eb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_enter_sleep_e_end_lbl: ;
                // > wifi_cmd
                m_pcli_keyword_wifi_cmd_f_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_wifi_cmd_f) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> wifi_cmd\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > wifi_cmd $AT
                    m_pcli_param_AT_fb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_AT_fb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> wifi_cmd $AT\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > wifi_cmd $AT <CR>
                        m_pcli_endl_fba_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_fba) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> wifi_cmd $AT <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     WIFICMD(GetOutputStream(), (*m_pcli_param_AT_fb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_fba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_AT_fb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_wifi_cmd_f_end_lbl: ;
                // > set_sn
                m_pcli_keyword_set_sn_g_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_set_sn_g) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_sn\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > set_sn $sn
                    m_pcli_param_sn_gb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_sn_gb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_sn $sn\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > set_sn $sn <CR>
                        m_pcli_endl_gba_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_gba) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_sn $sn <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     SetSN(GetOutputStream(), (*m_pcli_param_sn_gb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_gba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_sn_gb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_set_sn_g_end_lbl: ;
                // > get_sn
                m_pcli_keyword_get_sn_h_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_sn_h) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_sn\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_sn <CR>
                    m_pcli_endl_hb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_hb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_sn <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GetSN(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_hb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_sn_h_end_lbl: ;
                // > get_mac
                m_pcli_keyword_get_mac_i_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_mac_i) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_mac\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_mac <CR>
                    m_pcli_endl_ib_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_ib) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_mac <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GetMAC(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_ib_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_mac_i_end_lbl: ;
                // > set_mac
                m_pcli_keyword_set_mac_j_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_set_mac_j) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_mac\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > set_mac $mac
                    m_pcli_param_mac_jb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_mac_jb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_mac $mac\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > set_mac $mac <CR>
                        m_pcli_endl_jba_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_jba) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_mac $mac <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     SetMAC(GetOutputStream(), (*m_pcli_param_mac_jb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_jba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_mac_jb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_set_mac_j_end_lbl: ;
                // > get_version
                m_pcli_keyword_get_version_k_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_version_k) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_version\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_version <CR>
                    m_pcli_endl_kb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_kb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_version <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GetSYSVerion(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_kb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_version_k_end_lbl: ;
                // > gen_oob
                m_pcli_keyword_gen_oob_l_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_gen_oob_l) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> gen_oob\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > gen_oob <CR>
                    m_pcli_endl_lb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_lb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> gen_oob <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GenOOB(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_lb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_gen_oob_l_end_lbl: ;
                // > set_did
                m_pcli_keyword_set_did_m_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_set_did_m) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_did\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > set_did $did
                    m_pcli_param_did_mb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_did_mb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_did $did\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > set_did $did <CR>
                        m_pcli_endl_mba_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_mba) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_did $did <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     SetDID(GetOutputStream(), (*m_pcli_param_did_mb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_mba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_did_mb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_set_did_m_end_lbl: ;
                // > get_did
                m_pcli_keyword_get_did_n_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_did_n) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_did\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_did <CR>
                    m_pcli_endl_nb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_nb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_did <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GetDID(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_nb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_did_n_end_lbl: ;
                // > fac_reset
                m_pcli_keyword_fac_reset_o_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_fac_reset_o) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> fac_reset\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > fac_reset <CR>
                    m_pcli_endl_ob_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_ob) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> fac_reset <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 FactoryReset(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_ob_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_fac_reset_o_end_lbl: ;
                // > get_qr_code
                m_pcli_keyword_get_qr_code_p_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_qr_code_p) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_qr_code\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_qr_code <CR>
                    m_pcli_endl_pb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_pb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_qr_code <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GetQRCode(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_pb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_qr_code_p_end_lbl: ;
                // > set_key
                m_pcli_keyword_set_key_q_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_set_key_q) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_key\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > set_key $key
                    m_pcli_param_key_qb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_key_qb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_key $key\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > set_key $key <CR>
                        m_pcli_endl_qba_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_qba) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> set_key $key <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     SetKey(GetOutputStream(), (*m_pcli_param_key_qb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_qba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_key_qb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_set_key_q_end_lbl: ;
                // > get_key
                m_pcli_keyword_get_key_r_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_key_r) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_key\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_key <CR>
                    m_pcli_endl_rb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_rb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_key <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GetKey(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_rb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_key_r_end_lbl: ;
                // > cam_start
                m_pcli_keyword_cam_start_s_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_cam_start_s) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> cam_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > cam_start <CR>
                    m_pcli_endl_sb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_sb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> cam_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 CamStart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_sb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_cam_start_s_end_lbl: ;
                // > cam_stop
                m_pcli_keyword_cam_stop_t_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_cam_stop_t) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> cam_stop\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > cam_stop <CR>
                    m_pcli_endl_tb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_tb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> cam_stop <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 CamStop(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_tb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_cam_stop_t_end_lbl: ;
                // > mic_start
                m_pcli_keyword_mic_start_u_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_mic_start_u) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > mic_start <CR>
                    m_pcli_endl_ub_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_ub) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 MICSart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_ub_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_mic_start_u_end_lbl: ;
                // > mic_spk_test
                m_pcli_keyword_mic_spk_test_v_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_mic_spk_test_v) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_spk_test\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > mic_spk_test <CR>
                    m_pcli_endl_vb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_vb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_spk_test <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 MICSpkTest(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_vb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_mic_spk_test_v_end_lbl: ;
                // > mic_spk_aec
                m_pcli_keyword_mic_spk_aec_w_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_mic_spk_aec_w) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_spk_aec\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > mic_spk_aec <CR>
                    m_pcli_endl_wb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_wb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_spk_aec <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 MICSpkAec(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_wb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_mic_spk_aec_w_end_lbl: ;
                // > get_mic_file
                m_pcli_keyword_get_mic_file_x_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_mic_file_x) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_mic_file\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_mic_file <CR>
                    m_pcli_endl_xb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_xb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_mic_file <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 MICFileUpload(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_xb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_mic_file_x_end_lbl: ;
                // > mic_stop
                m_pcli_keyword_mic_stop_y_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_mic_stop_y) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_stop\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > mic_stop <CR>
                    m_pcli_endl_yb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_yb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mic_stop <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 MICStop(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_yb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_mic_stop_y_end_lbl: ;
                // > spk_start
                m_pcli_keyword_spk_start_z_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_spk_start_z) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> spk_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > spk_start <CR>
                    m_pcli_endl_zb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_zb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> spk_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 SPKStart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_zb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_spk_start_z_end_lbl: ;
                // > speak_stop
                m_pcli_keyword_speak_stop_A_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_speak_stop_A) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> speak_stop\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > speak_stop <CR>
                    m_pcli_endl_Ab_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Ab) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> speak_stop <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 SPKStop(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Ab_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_speak_stop_A_end_lbl: ;
                // > light_sensor_start
                m_pcli_keyword_light_sensor_start_B_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_light_sensor_start_B) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> light_sensor_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > light_sensor_start <CR>
                    m_pcli_endl_Bb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Bb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> light_sensor_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 LightSensorStart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Bb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_light_sensor_start_B_end_lbl: ;
                // > g_sensor_start
                m_pcli_keyword_g_sensor_start_C_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_g_sensor_start_C) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> g_sensor_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > g_sensor_start <CR>
                    m_pcli_endl_Cb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Cb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> g_sensor_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GravitySensorStart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Cb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_g_sensor_start_C_end_lbl: ;
                // > wled_start
                m_pcli_keyword_wled_start_D_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_wled_start_D) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> wled_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > wled_start <CR>
                    m_pcli_endl_Db_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Db) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> wled_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 WledStart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Db_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_wled_start_D_end_lbl: ;
                // > wled_stop
                m_pcli_keyword_wled_stop_E_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_wled_stop_E) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> wled_stop\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > wled_stop <CR>
                    m_pcli_endl_Eb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Eb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> wled_stop <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 WledStop(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Eb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_wled_stop_E_end_lbl: ;
                // > irled_start
                m_pcli_keyword_irled_start_F_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_irled_start_F) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> irled_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > irled_start <CR>
                    m_pcli_endl_Fb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Fb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> irled_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 IRledStart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Fb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_irled_start_F_end_lbl: ;
                // > irled_stop
                m_pcli_keyword_irled_stop_G_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_irled_stop_G) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> irled_stop\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > irled_stop <CR>
                    m_pcli_endl_Gb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Gb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> irled_stop <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 IRledStop(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Gb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_irled_stop_G_end_lbl: ;
                // > rgb_led_set
                m_pcli_keyword_rgb_led_set_H_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_rgb_led_set_H) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> rgb_led_set\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > rgb_led_set $colour
                    m_pcli_param_colour_Hb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_colour_Hb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> rgb_led_set $colour\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > rgb_led_set $colour <CR>
                        m_pcli_endl_Hba_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_Hba) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> rgb_led_set $colour <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     RGBLEDSet(GetOutputStream(), (*m_pcli_param_colour_Hb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_Hba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_colour_Hb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_rgb_led_set_H_end_lbl: ;
                // > obj_pir_start
                m_pcli_keyword_obj_pir_start_I_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_obj_pir_start_I) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> obj_pir_start\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > obj_pir_start <CR>
                    m_pcli_endl_Ic_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Ic) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> obj_pir_start <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 OBJPirSart(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Ic_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_obj_pir_start_I_end_lbl: ;
                // > obj_pir_stop
                m_pcli_keyword_obj_pir_stop_J_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_obj_pir_stop_J) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> obj_pir_stop\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > obj_pir_stop <CR>
                    m_pcli_endl_Jb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Jb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> obj_pir_stop <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 OBJPirStop(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Jb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_obj_pir_stop_J_end_lbl: ;
                // > get_battery
                m_pcli_keyword_get_battery_K_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_battery_K) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_battery\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_battery <CR>
                    m_pcli_endl_Kb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Kb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_battery <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 GetBattery(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Kb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_battery_K_end_lbl: ;
                // > start_button_test
                m_pcli_keyword_start_button_test_L_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_start_button_test_L) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> start_button_test\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > start_button_test <CR>
                    m_pcli_endl_Lb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Lb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> start_button_test <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 ButtonClick(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Lb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_start_button_test_L_end_lbl: ;
                // > save_info
                m_pcli_keyword_save_info_M_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_save_info_M) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> save_info\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > save_info $mkey
                    m_pcli_param_mkey_Mb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_mkey_Mb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> save_info $mkey\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > save_info $mkey $mvalue
                        m_pcli_param_mvalue_Mba_top_lbl: ;
                        if (cli_Elements == *m_pcli_param_mvalue_Mba) {
                            if (! cli_Elements.StepIt()) return false;
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> save_info $mkey $mvalue\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                            // > save_info $mkey $mvalue <CR>
                            m_pcli_endl_Mbaa_top_lbl: ;
                            if (cli_Elements == *m_pcli_endl_Mbaa) {
                                cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> save_info $mkey $mvalue <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                         SaveInfo(GetOutputStream(), (*m_pcli_param_mkey_Mb), (*m_pcli_param_mvalue_Mba));
/* > */ 
                                return true;
                            }
                            m_pcli_endl_Mbaa_end_lbl: ;
                            return false;
                        }
                        m_pcli_param_mvalue_Mba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_mkey_Mb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_save_info_M_end_lbl: ;
                // > get_info
                m_pcli_keyword_get_info_N_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_get_info_N) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_info\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > get_info $mkey
                    m_pcli_param_mkey_Nb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_mkey_Nb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_info $mkey\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > get_info $mkey <CR>
                        m_pcli_endl_Nba_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_Nba) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> get_info $mkey <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     GetInfo(GetOutputStream(), (*m_pcli_param_mkey_Nb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_Nba_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_mkey_Nb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_get_info_N_end_lbl: ;
                // > led(0x04)
                m_pcli_keyword_led_0x04__O_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_led_0x04__O) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> led(0x04)\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > led(0x04) $iCmdCode
                    m_pcli_param_iCmdCode_Ob_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_iCmdCode_Ob) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> led(0x04) $iCmdCode\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > led(0x04) $iCmdCode $iBright
                        m_pcli_param_iBright_Obb_top_lbl: ;
                        if (cli_Elements == *m_pcli_param_iBright_Obb) {
                            if (! cli_Elements.StepIt()) return false;
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> led(0x04) $iCmdCode $iBright\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                            // > led(0x04) $iCmdCode $iBright $iRGB
                            m_pcli_param_iRGB_Obbb_top_lbl: ;
                            if (cli_Elements == *m_pcli_param_iRGB_Obbb) {
                                if (! cli_Elements.StepIt()) return false;
                                cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> led(0x04) $iCmdCode $iBright $iRGB\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                                // > led(0x04) $iCmdCode $iBright $iRGB <CR>
                                m_pcli_endl_Obbbb_top_lbl: ;
                                if (cli_Elements == *m_pcli_endl_Obbbb) {
                                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> led(0x04) $iCmdCode $iBright $iRGB <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                             LEDConfig(GetOutputStream(), (*m_pcli_param_iCmdCode_Ob), (*m_pcli_param_iBright_Obb), (*m_pcli_param_iRGB_Obbb));
/* > */ 
                                    return true;
                                }
                                m_pcli_endl_Obbbb_end_lbl: ;
                                return false;
                            }
                            m_pcli_param_iRGB_Obbb_end_lbl: ;
                            return false;
                        }
                        m_pcli_param_iBright_Obb_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_iCmdCode_Ob_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_led_0x04__O_end_lbl: ;
                // > upgrade
                m_pcli_keyword_upgrade_P_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_upgrade_P) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> upgrade\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > upgrade <CR>
                    m_pcli_endl_Pb_top_lbl: ;
                    if (cli_Elements == *m_pcli_endl_Pb) {
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> upgrade <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                 MCUUpgrade(GetOutputStream());
/* > */ 
                        return true;
                    }
                    m_pcli_endl_Pb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_upgrade_P_end_lbl: ;
                // > mcutest
                m_pcli_keyword_mcutest_Q_top_lbl: ;
                if (cli_Elements == *m_pcli_keyword_mcutest_Q) {
                    if (! cli_Elements.StepIt()) return false;
                    cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mcutest\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                    // > mcutest $iCmdCode
                    m_pcli_param_iCmdCode_Qb_top_lbl: ;
                    if (cli_Elements == *m_pcli_param_iCmdCode_Qb) {
                        if (! cli_Elements.StepIt()) return false;
                        cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mcutest $iCmdCode\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
                        // > mcutest $iCmdCode <CR>
                        m_pcli_endl_Qbb_top_lbl: ;
                        if (cli_Elements == *m_pcli_endl_Qbb) {
                            cli::GetTraces().Trace(CLI_EXECUTION) << "context = \"> mcutest $iCmdCode <CR>\", " << "word = " << (dynamic_cast<const cli::Endl*>(*cli_Elements) ? "<CR>" : (const char*) (*cli_Elements)->GetKeyword()) << cli::endl;
/* > */ 
/* > */                     MCUTest(GetOutputStream(),(*m_pcli_param_iCmdCode_Qb));
/* > */ 
                            return true;
                        }
                        m_pcli_endl_Qbb_end_lbl: ;
                        return false;
                    }
                    m_pcli_param_iCmdCode_Qb_end_lbl: ;
                    return false;
                }
                m_pcli_keyword_mcutest_Q_end_lbl: ;
                return false;
            }
            m_pcli_cli_a_end_lbl: ;
        }
        return false;
    }

    public: virtual const bool OnError(const cli::ResourceString& location, const cli::ResourceString& message) const {
        return Cli::OnError(location, message);
    }

    public: virtual void OnExit(void) const {
    }

    public: virtual const cli::tk::String OnPrompt(void) const {
        return Menu::OnPrompt();
    }

};

// ----- Node creation -----

// ----- Extra cpp (option='body') -----

// ----- Extra cpp (option='tail') -----

