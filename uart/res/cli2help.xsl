<?xml version="1.0" encoding="utf-8"?>

<!--
    Copyright (c) 2006-2018, Alexis Royer, http://alexis.royer.free.fr/CLI

    All rights reserved.

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

        * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation
          and/or other materials provided with the distribution.
        * Neither the name of the CLI library project nor the names of its contributors may be used to endorse or promote products derived from this software
          without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->


<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cli="http://alexis.royer.free.fr/CLI">
<xsl:output method="xml" encoding="utf-8" indent="yes"/>


<xsl:param name="STR_Lang" select="'en'"/>
<xsl:param name="B_GenerateToc" select="1"/>
<xsl:param name="B_NumberTitles" select="1"/>


<!-- Root template: build the HTML content -->
<!--    Current node: /cli:cli -->
<xsl:template match="/cli:cli">
    <xsl:variable name="str_CliName" select="@name"/>
    <xsl:variable name="str_Title">
        <xsl:value-of select="$str_CliName"/>
        <xsl:text> - </xsl:text>
        <xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">Command Line Interface documentation</xsl:with-param></xsl:call-template></xsl:variable>

    <!-- Header / title -->
    <xsl:comment>File auto-generated by 'cli2help.xsl' - CLI library 2.9 (Alexis Royer, http://alexis.royer.free.fr/CLI/). Do not edit!</xsl:comment>
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <title><xsl:value-of select="$str_Title"/></title>
        <xsl:call-template name="T_CSS"/>
        <xsl:call-template name="T_Javascript"/>
    </head>
    <body onload="onLoad();">

    <h1><xsl:value-of select="$str_Title"/></h1>

    <!-- Intro: list comment line patterns and menus -->
    <a name="intro"/>
    <h2><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">Command Line Interface </xsl:with-param></xsl:call-template>
        <xsl:value-of select="$str_CliName"/>
        <xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource"> (general presentation)</xsl:with-param></xsl:call-template></h2>
    <!-- Comment line patterns -->
    <xsl:if test="/cli:cli/cli:comment">
        <p>
            <span>
                <xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">This command line interface uses the following patterns for comments definition:</xsl:with-param></xsl:call-template>
            </span>
            <table>
            <xsl:for-each select="/cli:cli/cli:comment">
                <tr>
                    <td valign="top"><li/></td>
                    <td valign="top"><xsl:value-of select="@start"/></td>
                </tr>
            </xsl:for-each>
            </table>
        </p>
    </xsl:if>
    <!-- Menus -->
    <p>
        <span>
            <xsl:text>'</xsl:text><xsl:value-of select="$str_CliName"/><xsl:text>'</xsl:text>
            <xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource"> is composed of the following menus:</xsl:with-param></xsl:call-template>
        </span>
        <table>
        <xsl:for-each select="/cli:cli | //cli:menu[@name]">
            <tr>
                <td valign="top"><li/></td>
                <td valign="top"><a><xsl:attribute name="href">#<xsl:call-template name="T_AnchorRef"/></xsl:attribute>
                                    <xsl:value-of select="@name"/>
                                    <xsl:if test="self::cli:cli"><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource"> (main menu)</xsl:with-param></xsl:call-template></xsl:if></a></td>
                <td/>
                <td><xsl:call-template name="T_GetNodeHelp"/></td>
            </tr>
        </xsl:for-each>
        </table>
    </p>

    <!-- Describe each menu -->
    <xsl:for-each select="/cli:cli | //cli:menu[@name]">
        <xsl:call-template name="T_Menu"/>
    </xsl:for-each>

    <!-- Footer -->
    <p class="file-comment">File auto-generated by 'cli2help.xsl' - CLI library 2.9 (Alexis Royer, <a target="blank" href="http://alexis.royer.free.fr/CLI/">http://alexis.royer.free.fr/CLI/</a>).</p>

    </body>
    </html>
</xsl:template>

<!-- Menu template: describe the commands of the menu -->
<!--    Current node: self::cli:cli or self::cli:menu[@name] -->
<xsl:template name="T_Menu">
    <xsl:variable name="xml_MenuNode" select="."/>

    <!-- Title -->
    <a><xsl:attribute name="name"><xsl:call-template name="T_AnchorRef"/></xsl:attribute></a>
    <h2><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">Menu </xsl:with-param></xsl:call-template>
        <xsl:value-of select="$xml_MenuNode/@name"/>
        <xsl:if test="self::cli:cli"><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource"> (main menu)</xsl:with-param></xsl:call-template></xsl:if></h2>

    <!-- List out the commands -->
    <p>
        <span>
            <xsl:text>'</xsl:text><xsl:value-of select="$xml_MenuNode/@name"/><xsl:text>'</xsl:text>
            <xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource"> is composed of the following commands:</xsl:with-param></xsl:call-template>
        </span>
        <table>
        <xsl:for-each select=".//cli:endl">
            <xsl:variable name="b_CheckMenu"><xsl:call-template name="T_CommandCheckMenu">
                <xsl:with-param name="XML_MenuNode" select="$xml_MenuNode"/>
            </xsl:call-template></xsl:variable>

            <xsl:if test="$b_CheckMenu=1">
                <tr>
                    <td valign="top"><li/></td>
                    <td valign="top"><a><xsl:attribute name="href">#<xsl:call-template name="T_AnchorRef"/></xsl:attribute>
                                        <xsl:call-template name="T_CommandName">
                                            <xsl:with-param name="XML_MenuNode" select="$xml_MenuNode"/>
                                        </xsl:call-template></a></td>
                    <td/>
                    <td><xsl:call-template name="T_CommandDescription"/></td>
                </tr>
            </xsl:if>
        </xsl:for-each>
        </table>
    </p>

    <!-- Describe each command -->
    <xsl:for-each select=".//cli:endl">
        <xsl:variable name="b_CheckMenu"><xsl:call-template name="T_CommandCheckMenu">
            <xsl:with-param name="XML_MenuNode" select="$xml_MenuNode"/>
        </xsl:call-template></xsl:variable>

        <xsl:if test="$b_CheckMenu=1">
            <xsl:call-template name="T_Command"/>
        </xsl:if>
    </xsl:for-each>
</xsl:template>

<!--    @brief: Command template: describe a command
        @context self::cli:endl
        @param XML_MenuNode Current menu node -->
<xsl:template name="T_Command">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>

    <xsl:variable name="str_CommandName">
        <xsl:call-template name="T_CommandName">
            <xsl:with-param name="XML_MenuNode" select="$XML_MenuNode"/>
        </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="str_CommandSynopsis">
        <xsl:call-template name="T_CommandSynopsis">
            <xsl:with-param name="XML_MenuNode" select="$XML_MenuNode"/>
            <xsl:with-param name="B_DisplayWarnings" select="1"/>
        </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="b_HasOptions">
        <xsl:call-template name="T_CommandHasOptions">
            <xsl:with-param name="XML_MenuNode" select="$XML_MenuNode"/>
        </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="b_HasParams">
        <xsl:call-template name="T_CommandHasParams">
            <xsl:with-param name="XML_MenuNode" select="$XML_MenuNode"/>
        </xsl:call-template>
    </xsl:variable>

    <!-- Title -->
    <a><xsl:attribute name="name"><xsl:call-template name="T_AnchorRef"/></xsl:attribute></a>
    <h3><xsl:value-of select="$str_CommandName"/></h3>

    <!-- Synopsis -->
    <p> <span class="command-section"><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">Synopsis:</xsl:with-param></xsl:call-template></span><br/>
        <span class="command-synopsis"><xsl:value-of select="$str_CommandSynopsis"/></span></p>

    <!-- Description -->
    <p> <span class="command-section"><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">Description:</xsl:with-param></xsl:call-template></span><br/>
        <xsl:call-template name="T_CommandDescription"/></p>

    <!-- Options -->
    <xsl:if test="$b_HasOptions=1">
        <p><u><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">Options:</xsl:with-param></xsl:call-template></u>

        <table>
        <xsl:call-template name="T_CommandOptions">
        </xsl:call-template>
        </table>
        </p>
    </xsl:if>

    <!-- Parameters -->
    <xsl:if test="$b_HasParams=1">
        <p><u><xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">Parameters:</xsl:with-param></xsl:call-template></u>

        <table>
        <xsl:call-template name="T_CommandParams">
            <xsl:with-param name="XML_MenuNode" select="$XML_MenuNode"/>
        </xsl:call-template>
        </table>
        </p>
    </xsl:if>

    <!-- Leading to menu -->
    <xsl:for-each select="./cli:menu">
        <xsl:variable name="str_MenuName">
            <xsl:choose>
            <xsl:when test="@name"><xsl:value-of select="@name"/></xsl:when>
            <xsl:when test="@ref"><xsl:value-of select="@ref"/></xsl:when>
            <xsl:otherwise><xsl:message terminate="yes">Error missing either @name or @ref attribute for cli:menu node</xsl:message></xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="str_AnchorName">
            <xsl:choose>
            <xsl:when test="@name"><xsl:call-template name="T_AnchorRef"/></xsl:when>
            <xsl:when test="@ref"><xsl:for-each select="//cli:menu[@name=$str_MenuName]"><xsl:call-template name="T_AnchorRef"/></xsl:for-each></xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:if test="@ref and (string-length($str_AnchorName) = 0)">
            <xsl:call-template name="T_Error">
                <xsl:with-param name="STR_Message"><xsl:text>No such menu '</xsl:text><xsl:value-of select="$str_MenuName"/><xsl:text>'</xsl:text></xsl:with-param>
            </xsl:call-template>
        </xsl:if>

        <p> <xsl:call-template name="T_Translation"><xsl:with-param name="STR_Resource">This command opens the menu </xsl:with-param></xsl:call-template>
            <a><xsl:attribute name="href">#<xsl:value-of select="$str_AnchorName"/></xsl:attribute><xsl:value-of select="$str_MenuName"/></a>.</p>
    </xsl:for-each>
</xsl:template>

<!--    @brief Check a command is owned by a given menu
        @context self::cli:endl
        @param XML_MenuNode Menu whose ownership must be checked -->
<xsl:template name="T_CommandCheckMenu">
    <xsl:param name="XML_MenuNode"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$CHECK_MENU"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="0"/>
        <xsl:with-param name="B_FollowTags" select="0"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Command name
        @context self::cli:endl
        @param XML_MenuNode Context menu of the command. -->
<xsl:template name="T_CommandName">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$NAME"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="0"/>
        <xsl:with-param name="B_FollowTags" select="1"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Command synopsis
        @context self::cli:endl
        @param XML_MenuNode Context menu of the command.
        @param B_DisplayWarnings 1 displays warnings, 0 turns them off -->
<xsl:template name="T_CommandSynopsis">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>
    <xsl:param name="B_DisplayWarnings" select="0"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$SYNOPSIS"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="$B_DisplayWarnings"/>
        <xsl:with-param name="B_FollowTags" select="1"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Command description template - Returns the help of the current command
        @context self::cli:endl
        @param XML_MenuNode Context menu of the command. -->
<xsl:template name="T_CommandDescription">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$DESCRIPTION"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="0"/>
        <xsl:with-param name="B_FollowTags" select="1"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Command options checking
        @context self::cli:endl
        @param XML_MenuNode Context menu of the command. -->
<xsl:template name="T_CommandHasOptions">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$HAS_OPTIONS"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="0"/>
        <xsl:with-param name="B_FollowTags" select="1"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Command options listing
        @context self::cli:endl
        @param XML_MenuNode Context menu of the command. -->
<xsl:template name="T_CommandOptions">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$OPTIONS"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="0"/>
        <xsl:with-param name="B_FollowTags" select="1"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Command parameters checking
        @context self::cli:endl
        @param XML_MenuNode Context menu of the command. -->
<xsl:template name="T_CommandHasParams">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$HAS_PARAMS"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="0"/>
        <xsl:with-param name="B_FollowTags" select="1"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Command parameters listing
        @context self::cli:endl
        @param XML_MenuNode Context menu of the command. -->
<xsl:template name="T_CommandParams">
    <xsl:param name="XML_MenuNode" select="/cli:cli"/>

    <xsl:call-template name="T_Recursion">
        <xsl:with-param name="STR_Operation" select="$PARAMS"/>
        <xsl:with-param name="XML_StartNode" select="$XML_MenuNode"/>
        <xsl:with-param name="XML_EndNode" select="."/>
        <xsl:with-param name="B_DisplayWarnings" select="0"/>
        <xsl:with-param name="B_FollowTags" select="1"/>
    </xsl:call-template>
</xsl:template>

<!--    @brief Recursion operation constants. -->
<xsl:variable name="NONE">none</xsl:variable>
<xsl:variable name="CHECK_MENU">check-menu</xsl:variable>
<xsl:variable name="NAME">name</xsl:variable>
<xsl:variable name="SYNOPSIS">synopsis</xsl:variable>
<xsl:variable name="DESCRIPTION">description</xsl:variable>
<xsl:variable name="HAS_OPTIONS">has-options</xsl:variable>
<xsl:variable name="OPTIONS">options</xsl:variable>
<xsl:variable name="HAS_PARAMS">has-params</xsl:variable>
<xsl:variable name="PARAMS">params</xsl:variable>

<!--    @brief Recursion template
        @context Recursive, initial node: self::cli:endl or self::cli:tag[@ref]
        @param STR_Operation Operation executed: either CHECK_MENU, SYNOPSIS, HAS_OPTIONS, OPTIONS, HAS_PARAMS or PARAMS.
        @param XML_StartNode Starting node of the recursion.
        @param XML_EndNode Initial context node, wich is the ending node of the recursion.
        @param B_DisplayWarnings 1 displays warnings, 0 turns them off -->
<xsl:template name="T_Recursion">
    <xsl:param name="STR_Operation" select="NAME"/>
    <xsl:param name="XML_StartNode" select="/cli:cli"/>
    <xsl:param name="XML_EndNode" select="."/>
    <xsl:param name="B_DisplayWarnings" select="0"/>
    <xsl:param name="B_FollowTags" select="1"/>

    <!-- Debug trace -->
    <xsl:variable name="str_DebugOperation" select="$NONE"/>
    <xsl:if test="$STR_Operation=$str_DebugOperation"><xsl:message terminate="no">
        <xsl:text>STR_Operation = </xsl:text><xsl:value-of select="$STR_Operation"/><xsl:text>, </xsl:text>
        <xsl:text>B_FollowTags = </xsl:text><xsl:value-of select="$B_FollowTags"/><xsl:text>, </xsl:text>
        <xsl:text>local-name(XML_StartNode) = </xsl:text><xsl:value-of select="local-name($XML_StartNode)"/>
            <xsl:choose>
                <xsl:when test="$XML_StartNode/@name">[@name=<xsl:value-of select="$XML_StartNode/@name"/>]</xsl:when>
                <xsl:when test="$XML_StartNode/@string">[@string=<xsl:value-of select="$XML_StartNode/@string"/>]</xsl:when>
                <xsl:when test="$XML_StartNode/@id">[@id=<xsl:value-of select="$XML_StartNode/@id"/>]</xsl:when>
                <xsl:when test="$XML_StartNode/@ref">[@ref=<xsl:value-of select="$XML_StartNode/@ref"/>]</xsl:when>
            </xsl:choose>
            <xsl:text>, </xsl:text>
        <xsl:text>local-name(XML_EndNode) = </xsl:text><xsl:value-of select="local-name($XML_EndNode)"/>
            <xsl:choose>
                <xsl:when test="$XML_EndNode/@name">[@name=<xsl:value-of select="$XML_EndNode/@name"/>]</xsl:when>
                <xsl:when test="$XML_EndNode/@string">[@string=<xsl:value-of select="$XML_EndNode/@string"/>]</xsl:when>
                <xsl:when test="$XML_EndNode/@id">[@id=<xsl:value-of select="$XML_EndNode/@id"/>]</xsl:when>
                <xsl:when test="$XML_EndNode/@ref">[@ref=<xsl:value-of select="$XML_EndNode/@ref"/>]</xsl:when>
            </xsl:choose>
            <xsl:text>, </xsl:text>
        <xsl:text>local-name() = </xsl:text><xsl:value-of select="local-name()"/>
            <xsl:choose>
                <xsl:when test="@name">[@name=<xsl:value-of select="@name"/>]</xsl:when>
                <xsl:when test="@string">[@string=<xsl:value-of select="@string"/>]</xsl:when>
                <xsl:when test="@id">[@id=<xsl:value-of select="@id"/>]</xsl:when>
                <xsl:when test="@ref">[@ref=<xsl:value-of select="@ref"/>]</xsl:when>
            </xsl:choose>
    </xsl:message></xsl:if>

    <!-- Stop conditions -->
    <xsl:variable name="b_StopRecursion">
        <xsl:choose>
            <!-- General stop conditions -->
            <xsl:when test="generate-id(.)=generate-id($XML_StartNode)">1</xsl:when>
            <xsl:when test="self::cli:cli">1</xsl:when>
            <xsl:when test="self::cli:menu[@name]">1</xsl:when>
            <xsl:when test="self::cli:tag[@id=$XML_EndNode[self::cli:tag]/@ref]">1</xsl:when>
            <!-- Operation specific stop conditions -->
            <xsl:when test="self::cli:endl/cli:help and ($STR_Operation=$DESCRIPTION)">1</xsl:when>
            <xsl:when test="self::cli:keyword/cli:help and ($STR_Operation=$DESCRIPTION)">1</xsl:when>
            <xsl:when test="self::cli:tag and child::cli:help and ($STR_Operation=$DESCRIPTION)">1</xsl:when>
            <xsl:when test="self::cli:tag[@id and @hollow='yes'] and ($STR_Operation=$DESCRIPTION)">1</xsl:when>
            <xsl:when test="self::cli:tag and ($STR_Operation=$HAS_OPTIONS)">1</xsl:when>
            <xsl:when test="self::cli:param and ($STR_Operation=$HAS_PARAMS)">1</xsl:when>
            <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <xsl:if test="$b_StopRecursion=1">
        <xsl:choose>
            <xsl:when test="$STR_Operation=$CHECK_MENU">
                <xsl:choose>
                    <xsl:when test="(generate-id(.)=generate-id($XML_StartNode)) and (self::cli:cli or self::cli:menu[@name])">1</xsl:when>
                    <xsl:otherwise>0</xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="$STR_Operation=$DESCRIPTION">
                <xsl:if test="generate-id(.)!=generate-id($XML_StartNode)">
                    <xsl:choose>
                        <xsl:when test="self::cli:cli"/>
                        <xsl:when test="self::cli:menu[@name]"/>
                        <xsl:when test="self::cli:tag[@id and @hollow='yes']"/>
                        <xsl:when test="self::cli:endl or self::cli:keyword"><xsl:call-template name="T_GetNodeHelp"/></xsl:when>
                        <xsl:when test="self::cli:tag and child::cli:help"><xsl:call-template name="T_GetNodeHelp"/></xsl:when>
                    </xsl:choose>
                </xsl:if>
            </xsl:when>
            <xsl:when test="$STR_Operation=$HAS_OPTIONS">
                <xsl:choose>
                    <xsl:when test="self::cli:tag">1</xsl:when>
                    <xsl:otherwise>0</xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="$STR_Operation=$HAS_PARAMS">
                <xsl:choose>
                    <xsl:when test="self::cli:param">1</xsl:when>
                    <xsl:otherwise>0</xsl:otherwise>
                </xsl:choose>
            </xsl:when>
        </xsl:choose>
    </xsl:if>
    <xsl:if test="$b_StopRecursion=0">
        <!-- Recursive call over parent nodes -->
        <xsl:variable name="x_ParentResult">
            <xsl:choose>
                <xsl:when test="self::cli:tag[@id and @hollow='yes'] and not($STR_Operation = $CHECK_MENU)">
                    <!-- Do not recurse on hollow tags -->
                </xsl:when>
                <xsl:otherwise>
                    <xsl:for-each select="parent::cli:*">
                        <xsl:call-template name="T_Recursion">
                            <xsl:with-param name="STR_Operation" select="$STR_Operation"/>
                            <xsl:with-param name="XML_StartNode" select="$XML_StartNode"/>
                            <xsl:with-param name="XML_EndNode" select="$XML_EndNode"/>
                            <xsl:with-param name="B_DisplayWarnings" select="$B_DisplayWarnings"/>
                            <xsl:with-param name="B_FollowTags" select="$B_FollowTags"/>
                        </xsl:call-template>
                    </xsl:for-each>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <!-- Current node processing -->
        <xsl:choose>
            <xsl:when test="($STR_Operation=$NAME) or ($STR_Operation=$SYNOPSIS)">
                <xsl:value-of select="$x_ParentResult"/>
                <xsl:if test="(string-length($x_ParentResult) &gt; 0) and not(generate-id(.)=generate-id($XML_EndNode))"><xsl:text> </xsl:text></xsl:if>
            </xsl:when>
            <xsl:when test="$STR_Operation=$DESCRIPTION">
                <xsl:copy-of select="$x_ParentResult"/>
            </xsl:when>
            <xsl:when test="$STR_Operation=$OPTIONS">
                <xsl:copy-of select="$x_ParentResult"/>
            </xsl:when>
            <xsl:when test="$STR_Operation=$PARAMS">
                <xsl:copy-of select="$x_ParentResult"/>
            </xsl:when>
        </xsl:choose>

        <xsl:choose>
            <xsl:when test="($STR_Operation=$CHECK_MENU) and contains($x_ParentResult,'1')">1</xsl:when>            <!-- No need to go further -->
            <xsl:when test="($STR_Operation=$DESCRIPTION) and (string-length($x_ParentResult) &gt; 0)"></xsl:when>  <!-- No need to go further -->
            <xsl:when test="($STR_Operation=$HAS_OPTIONS) and contains($x_ParentResult,'1')">1</xsl:when>           <!-- No need to go further -->
            <xsl:when test="($STR_Operation=$HAS_PARAMS) and contains($x_ParentResult,'1')">1</xsl:when>            <!-- No need to go further -->
            <xsl:otherwise>
                <!-- Process the current node -->
                <xsl:choose>
                    <!-- Keywords -->
                    <xsl:when test="self::cli:keyword">
                        <xsl:choose>
                            <xsl:when test="($STR_Operation=$NAME) or ($STR_Operation=$SYNOPSIS)"><xsl:value-of select="@string"/></xsl:when>
                        </xsl:choose>
                    </xsl:when>
                    <!-- Parameters -->
                    <xsl:when test="self::cli:param">
                        <xsl:choose>
                            <xsl:when test="($STR_Operation=$NAME) or ($STR_Operation=$SYNOPSIS)">
                                <xsl:text>&lt;</xsl:text><xsl:value-of select="@id"/><xsl:text>&gt;</xsl:text>
                            </xsl:when>
                            <xsl:when test="$STR_Operation=$PARAMS">
                                <tr>
                                    <td><span class="param-name"><xsl:value-of select="@id"/></span></td>
                                    <td><span class="param-type"><xsl:text>(</xsl:text><xsl:value-of select="@type"/><xsl:text>)</xsl:text></span></td>
                                    <td><xsl:call-template name="T_GetNodeHelp"/></td>
                                </tr>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:when>
                    <!-- End nodes -->
                    <xsl:when test="generate-id(.)=generate-id($XML_EndNode)">
                        <xsl:choose>
                            <xsl:when test="$STR_Operation=$CHECK_MENU">0</xsl:when> <!-- If this instruction is reached, it means the menu checking has failed -->
                            <xsl:when test="$STR_Operation=$DESCRIPTION"><xsl:call-template name="T_GetNodeHelp"/></xsl:when>
                                                                                    <!-- If this instruction is reached, it means no help has been found for the command.
                                                                                        T_GetNodeHelp will generate a default help. -->
                            <xsl:when test="$STR_Operation=$HAS_OPTIONS">0</xsl:when> <!-- If this instruction is reached, it means no tag has been found for the command -->
                            <xsl:when test="$STR_Operation=$HAS_PARAMS">0</xsl:when> <!-- If this instruction is reached, it means no parameter has been found for the command -->
                        </xsl:choose>
                    </xsl:when>
                    <!-- Tags -->
                    <xsl:when test="self::cli:tag[@id]">
                        <xsl:if test="$B_FollowTags=1">
                            <xsl:variable name="xml_TagId" select="."/>
                            <xsl:choose>
                                <!-- Backward tag -->
                                <xsl:when test="count(.//cli:tag[@ref=$xml_TagId/@id]) &gt; 0">
                                    <xsl:if test="$STR_Operation=$NAME"><xsl:text>[...]</xsl:text></xsl:if>
                                    <xsl:if test="not($STR_Operation=$NAME)">
                                        <xsl:variable name="xml_StartNode" select="."/>

                                        <xsl:for-each select=".//cli:tag[@ref=$xml_TagId/@id]">
                                            <xsl:if test="not(@max) and ($B_DisplayWarnings=1)">
                                                <xsl:message terminate="no">Warning! Backward cli:tag[@ref='<xsl:value-of select="@ref"/>'] with no @max attribute. Considering @max='unbounded'</xsl:message>
                                            </xsl:if>

                                            <xsl:if test="$STR_Operation=$SYNOPSIS"><xsl:text>[</xsl:text></xsl:if>

                                            <xsl:call-template name="T_Recursion">
                                                <xsl:with-param name="STR_Operation" select="$STR_Operation"/>
                                                <xsl:with-param name="XML_StartNode" select="$xml_StartNode"/>
                                                <xsl:with-param name="XML_EndNode" select="."/>
                                                <xsl:with-param name="B_DisplayWarnings" select="$B_DisplayWarnings"/>
                                                <xsl:with-param name="B_FollowTags" select="$B_FollowTags"/>
                                            </xsl:call-template>

                                            <xsl:if test="$STR_Operation=$OPTIONS">
                                                <xsl:variable name="str_OptionSynopsis">
                                                    <xsl:call-template name="T_Recursion">
                                                        <xsl:with-param name="STR_Operation" select="$SYNOPSIS"/>
                                                        <xsl:with-param name="XML_StartNode" select="$xml_StartNode"/>
                                                        <xsl:with-param name="XML_EndNode" select="."/>
                                                        <xsl:with-param name="B_DisplayWarnings" select="0"/>
                                                        <xsl:with-param name="B_FollowTags" select="0"/>
                                                    </xsl:call-template>
                                                </xsl:variable>
                                                <xsl:variable name="str_OptionDescription">
                                                    <xsl:call-template name="T_Recursion">
                                                        <xsl:with-param name="STR_Operation" select="$DESCRIPTION"/>
                                                        <xsl:with-param name="XML_StartNode" select="$xml_StartNode"/>
                                                        <xsl:with-param name="XML_EndNode" select="."/>
                                                        <xsl:with-param name="B_DisplayWarnings" select="0"/>
                                                        <xsl:with-param name="B_FollowTags" select="0"/>
                                                    </xsl:call-template>
                                                </xsl:variable>

                                                <tr>
                                                    <td><span class="option-name"><xsl:value-of select="$str_OptionSynopsis"/></span></td>
                                                    <td><xsl:copy-of select="$str_OptionDescription"/></td>
                                                </tr>
                                            </xsl:if>

                                            <xsl:if test="$STR_Operation=$SYNOPSIS">
                                                <xsl:text>]</xsl:text>
                                                <xsl:if test="not(@max) or (@max='unbounded')"><xsl:text>*</xsl:text></xsl:if>
                                                <xsl:if test="position()&lt;last()"><xsl:text> </xsl:text></xsl:if>
                                            </xsl:if>
                                        </xsl:for-each>
                                    </xsl:if>
                                </xsl:when>
                                <!-- Dummy tags -->
                                <xsl:when test="count(//cli:tag[@ref=$xml_TagId/@id])=0"><!-- Do nothing --></xsl:when>
                                <!-- Forward tag -->
                                <xsl:when test="not($STR_Operation=$DESCRIPTION)">
                                    <xsl:variable name="i_TagRefCount" select="count(//cli:tag[@ref=$xml_TagId/@id] | $xml_TagId[not(@hollow='yes')])"/>

                                    <xsl:for-each select="//cli:*[count(.//cli:tag[@ref=$xml_TagId/@id] | .//cli:tag[.=$xml_TagId and not(@hollow='yes')]) = $i_TagRefCount]">
                                        <xsl:sort select="count(ancestor::cli:*)" data-type="number" order="ascending"/>
                                        <xsl:if test="position()=last()">   <!-- Retrieves the latest node wich contains all tag/@ref -->
                                            <xsl:variable name="xml_LastCommonNode" select="."/>
                                            <xsl:variable name="x_CommonResult">
                                                <xsl:call-template name="T_Recursion">
                                                    <xsl:with-param name="STR_Operation" select="$STR_Operation"/>
                                                    <xsl:with-param name="XML_StartNode" select="$XML_StartNode"/>
                                                    <xsl:with-param name="XML_EndNode" select="$XML_EndNode"/>
                                                    <xsl:with-param name="B_DisplayWarnings" select="$B_DisplayWarnings"/>
                                                    <xsl:with-param name="B_FollowTags" select="$B_FollowTags"/>
                                                </xsl:call-template>
                                            </xsl:variable>

                                            <xsl:choose>
                                            <xsl:when test="($STR_Operation=$NAME) or ($STR_Operation=$SYNOPSIS)">
                                                <!-- Do not repeat the common result if it is already processed using the parent node aspect -->
                                                <xsl:if test="not($xml_LastCommonNode//cli:tag=$xml_TagId) or ($xml_TagId/@hollow='yes')">
                                                    <xsl:value-of select="$x_CommonResult"/>
                                                    <xsl:if test="string-length($x_CommonResult) &gt; 0"><xsl:text> </xsl:text></xsl:if>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:when test="$STR_Operation=$OPTIONS">
                                                <xsl:copy-of select="$x_CommonResult"/>
                                            </xsl:when>
                                            <xsl:when test="$STR_Operation=$PARAMS">
                                                <xsl:copy-of select="$x_CommonResult"/>
                                            </xsl:when>
                                            </xsl:choose>

                                            <xsl:if test="$STR_Operation=$NAME"><xsl:text>(...)</xsl:text></xsl:if>
                                            <xsl:if test="not($STR_Operation=$NAME)">
                                                <xsl:choose>
                                                    <xsl:when test="($STR_Operation=$CHECK_MENU) and contains($x_CommonResult,'1')">1</xsl:when>   <!-- No need to go further -->
                                                    <xsl:when test="($STR_Operation=$HAS_OPTIONS) and contains($x_CommonResult,'1')">1</xsl:when>  <!-- No need to go further -->
                                                    <xsl:when test="($STR_Operation=$HAS_PARAMS) and contains($x_CommonResult,'1')">1</xsl:when>   <!-- No need to go further -->
                                                    <xsl:otherwise>
                                                        <xsl:if test="$STR_Operation=$SYNOPSIS"><xsl:text>(</xsl:text></xsl:if>
                                                        <xsl:for-each select="//cli:tag[@ref=$xml_TagId/@id] | //cli:tag[(@id=$xml_TagId/@id) and not(@hollow='yes')]">
                                                            <xsl:call-template name="T_Recursion">
                                                                <xsl:with-param name="STR_Operation" select="$STR_Operation"/>
                                                                <xsl:with-param name="XML_StartNode" select="$xml_LastCommonNode"/>
                                                                <xsl:with-param name="XML_EndNode" select="."/>
                                                                <xsl:with-param name="B_DisplayWarnings" select="$B_DisplayWarnings"/>
                                                                <xsl:with-param name="B_FollowTags" select="$B_FollowTags"/>
                                                            </xsl:call-template>

                                                            <xsl:if test="$STR_Operation=$OPTIONS">
                                                                <xsl:variable name="str_OptionSynopsis">
                                                                    <xsl:call-template name="T_Recursion">
                                                                        <xsl:with-param name="STR_Operation" select="$SYNOPSIS"/>
                                                                        <xsl:with-param name="XML_StartNode" select="$xml_LastCommonNode"/>
                                                                        <xsl:with-param name="XML_EndNode" select="."/>
                                                                        <xsl:with-param name="B_DisplayWarnings" select="0"/>
                                                                        <xsl:with-param name="B_FollowTags" select="0"/>
                                                                    </xsl:call-template>
                                                                </xsl:variable>
                                                                <xsl:variable name="str_OptionDescription">
                                                                    <xsl:call-template name="T_Recursion">
                                                                        <xsl:with-param name="STR_Operation" select="$DESCRIPTION"/>
                                                                        <xsl:with-param name="XML_StartNode" select="$xml_LastCommonNode"/>
                                                                        <xsl:with-param name="XML_EndNode" select="."/>
                                                                        <xsl:with-param name="B_DisplayWarnings" select="0"/>
                                                                        <xsl:with-param name="B_FollowTags" select="0"/>
                                                                    </xsl:call-template>
                                                                </xsl:variable>

                                                                <xsl:if test="string-length($str_OptionSynopsis) &gt; 0">
                                                                    <tr>
                                                                        <td><span class="option-name"><xsl:value-of select="$str_OptionSynopsis"/></span></td>
                                                                        <td><xsl:copy-of select="$str_OptionDescription"/></td>
                                                                    </tr>
                                                                </xsl:if>
                                                            </xsl:if>

                                                            <xsl:if test="$STR_Operation=$SYNOPSIS">
                                                                <xsl:if test="position() &lt; last()"><xsl:text> | </xsl:text></xsl:if>
                                                            </xsl:if>
                                                        </xsl:for-each>
                                                        <xsl:if test="$STR_Operation=$SYNOPSIS"><xsl:text>)</xsl:text></xsl:if>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:if>
                                        </xsl:if>
                                    </xsl:for-each>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise><xsl:message terminate="yes">Error! T_Recursion unknown node '<xsl:value-of select="local-name()"/>'</xsl:message></xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:if>
</xsl:template>

<!--    @brief Direct help accessor
        @context Current node: self::cli:* -->
<xsl:template name="T_GetNodeHelp">
    <xsl:choose>
        <xsl:when test="./cli:help[@lang=$STR_Lang]"><xsl:value-of select="./cli:help[@lang=$STR_Lang]"/></xsl:when>
        <xsl:when test="./cli:help"><xsl:value-of select="./cli:help[position()=1]"/></xsl:when>
        <xsl:when test="self::cli:param">
            <span class="default">
                <xsl:call-template name="T_Translation">
                    <xsl:with-param name="STR_Resource"><xsl:value-of select="@type"/><xsl:text> value</xsl:text></xsl:with-param>
                </xsl:call-template>
            </span>
        </xsl:when>
        <xsl:otherwise>
            <span class="default">
                <xsl:call-template name="T_Translation">
                    <xsl:with-param name="STR_Resource">No help available</xsl:with-param>
                </xsl:call-template>
            </span>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<!--    @brief Anchor name generation
        @context Current node: self::cli:* -->
<xsl:template name="T_AnchorRef">
    <!--<xsl:value-of select="generate-id(.)"/>-->
    <xsl:value-of select="count(preceding::cli:*) + count(ancestor::cli:*)"/>
</xsl:template>

<!--    @brief Resource translation
        @param STR_Resource English resource string to translate -->
<xsl:template name="T_Translation">
    <xsl:param name="STR_Resource"/>

    <xsl:choose>
    <xsl:when test="$STR_Resource=' (general presentation)'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text> (présentation générale)</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource=' (main menu)'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text> (menu principal)</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='This command line interface uses the following patterns for comments definition:'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Cette interface en ligne de commande utilise les motifs suivants pour la définition de commentaires :</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource=' is composed of the following menus:'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text> est composé des menus suivants :</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource=' is composed of the following commands:'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text> est composé des commandes suivantes :</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='Command Line Interface '">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Interface en ligne de commande (CLI) </xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='Command Line Interface documentation'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Documentation d'interface en ligne de commande (CLI)</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='Description:'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Description :</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='float value'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Valeur décimale</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='host value'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Adresse réseau</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='int value'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Valeur entière</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='Menu '">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Menu </xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='No help available'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Aucune aide disponible</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='Parameters:'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Paramètres :</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='Options:'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Options :</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='string value'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Chaîne de caractères</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='Synopsis:'">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Synopsis :</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="$STR_Resource='This command opens the menu '">
        <xsl:choose>
        <xsl:when test="$STR_Lang='fr'"><xsl:text>Cette commande ouvre le menu </xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:otherwise><xsl:value-of select="$STR_Resource"/></xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="T_Javascript">
    <script type="text/javascript">
<xsl:comment>
function onLoad() {<xsl:if test="$B_NumberTitles=1">
    numberTitles(null);</xsl:if><xsl:if test="$B_GenerateToc=1">
    generateToc(null);</xsl:if>
}

<xsl:if test="$B_NumberTitles=1">
var m_iH2, m_iH3;
function numberTitles(XML_Node) {
    function getTextNode(xml_Node) {
        if (xml_Node.nodeName == "#text") { return xml_Node; }
        return getTextNode(xml_Node.firstChild);
    }

    if (XML_Node == null) {
        XML_Node = document;
        m_iH2 = 0; m_iH3 = 0;
    }

    if (XML_Node.nodeName == "H2") {
        m_iH2 ++; m_iH3 = 0;
        var xml_TextNode = getTextNode(XML_Node);
        if (xml_TextNode != null) {
            xml_TextNode.nodeValue = (m_iH2 + ". " + xml_TextNode.nodeValue);
        }
    }
    if (XML_Node.nodeName == "H3") {
        m_iH3 ++;
        var xml_TextNode = getTextNode(XML_Node);
        if (xml_TextNode != null) {
            xml_TextNode.nodeValue = (m_iH2 + "." + m_iH3 + ". " + xml_TextNode.nodeValue);
        }
    }

    // Recursion
    for (var xml_Child = XML_Node.firstChild; xml_Child != null; xml_Child = xml_Child.nextSibling) {
        numberTitles(xml_Child);
    }
}
</xsl:if>

<xsl:if test="$B_GenerateToc=1">
function generateToc(XML_Node) {
    function getTableNode(XML_Node) {
        if (XML_Node == null) { XML_Node = document; }
        if (XML_Node.nodeName == "H1") {
            var xml_H1 = XML_Node;
            if ((xml_H1.nextSibling != null) &amp;&amp; (xml_H1.nextSibling.nodeName == "TABLE")) {
                return xml_H1.nextSibling;
            } else if (xml_H1.parentNode != null) {
                var xml_TableNode = document.createElement("TABLE");
                if (xml_H1.nextSibling != null) {
                    xml_H1.parentNode.insertBefore(xml_TableNode, xml_H1.nextSibling);
                } else {
                    xml_H1.parentNode.appendChild(xml_TableNode);
                }
                return xml_TableNode;
            }
        } else {
            for (var xml_Child = XML_Node.firstChild; xml_Child != null; xml_Child = xml_Child.nextSibling) {
                var xml_TableNode = getTableNode(xml_Child);
                if (xml_TableNode != null) {
                    return xml_TableNode;
                }
            }
        }
        return null;
    }
    function createTocEntry(STR_TocClass, STR_AnchorName, STR_Title) {
        var xml_TableNode = getTableNode();
        if (xml_TableNode != null) {
            var xml_TextNode = document.createTextNode(STR_Title);
            var xml_ANode = document.createElement("A"); xml_ANode.href = "#" + STR_AnchorName; xml_ANode.className = STR_TocClass; xml_ANode.appendChild(xml_TextNode);
            var xml_TdNode = document.createElement("TD"); xml_TdNode.appendChild(xml_ANode);
            var xml_TrNode = document.createElement("TR"); xml_TrNode.appendChild(xml_TdNode);
            xml_TableNode.appendChild(xml_TrNode);
        }
    }

    function getAnchorNode(XML_Node) {
        if (XML_Node == null) { return null; }
        if (XML_Node.nodeName == "A") { return XML_Node; }
        return getAnchorNode(XML_Node.previousSibling);
    }
    function getTextNode(XML_Node) {
        if (XML_Node == null) { return null; }
        if (XML_Node.nodeName == "#text") { return XML_Node; }
        return getTextNode(XML_Node.firstChild);
    }

    if (XML_Node == null) { XML_Node = document; }
    if (XML_Node.nodeName == "H2") {
        var xml_AnchorNode = getAnchorNode(XML_Node);
        var xml_TextNode = getTextNode(XML_Node);
        if ((xml_AnchorNode != null) &amp;&amp; (xml_TextNode != null)) {
            createTocEntry("toc-h2", xml_AnchorNode.name, xml_TextNode.nodeValue);
        }
    }
    if (XML_Node.nodeName == "H3") {
        var xml_AnchorNode = getAnchorNode(XML_Node);
        var xml_TextNode = getTextNode(XML_Node);
        if ((xml_AnchorNode != null) &amp;&amp; (xml_TextNode != null)) {
            createTocEntry("toc-h3", xml_AnchorNode.name, xml_TextNode.nodeValue);
        }
    }

    // Recursion
    for (var xml_Child = XML_Node.firstChild; xml_Child != null; xml_Child = xml_Child.nextSibling) {
        generateToc(xml_Child);
    }
}
</xsl:if>

</xsl:comment>
    </script>
</xsl:template>

<xsl:template name="T_CSS">
    <style type="text/css">
<xsl:comment>
body { font-family: Arial; }
.command-section { text-decoration: underline; }
.command-synopsis { font-family: monospace; }
.option-name { font-weight: bold; }
.param-name { font-weight: bold; }
.param-type { font-style: italic; }
.default { font-style: italic; font-size: 80%; }
.file-comment { font-size: 80%; }
<xsl:if test="$B_GenerateToc=1">
.toc-h2 { margin-left: 50px; }
.toc-h3 { margin-left: 100px; }
</xsl:if>
</xsl:comment>
    </style>
</xsl:template>

<xsl:template name="T_Error">
    <xsl:param name="STR_Message"/>

    <xsl:message terminate="yes">
        <xsl:text>Error: </xsl:text>
        <xsl:value-of select="$STR_Message"/>
        <xsl:text>
</xsl:text>
    </xsl:message>
</xsl:template>

</xsl:stylesheet>
